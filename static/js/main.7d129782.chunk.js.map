{"version":3,"sources":["logo.svg","components/Spinner.js","components/WinScreen.js","components/slider/Handle.jsx","components/slider/Track.jsx","components/slider/styles.js","utils/ui.js","components/cards/Card.jsx","components/cards/HiddenCard.jsx","components/players/PlayerStatusNotificationBox.jsx","components/players/Player.jsx","components/players/ShowdownPlayer.jsx","utils/socketConfig.js","utils/Web3Manager.js","router/holdem/holdem.jsx","router/HomePage/HomePage.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Spinner","props","className","src","alt","WinScreen","width","height","title","frameBorder","allow","allowFullScreen","Handle","handle","id","value","percent","getHandleProps","min","max","isNaN","style","left","position","marginLeft","marginTop","zIndex","border","textAlign","cursor","borderRadius","backgroundColor","color","display","textShadow","justifyContent","fontFamily","fontSize","Track","source","target","getTrackProps","sliderStyle","railStyle","determineMinBet","highBet","playerChipsStack","playerBet","playerTotalChips","Number","renderUnicodeSuitSymbol","suit","Error","renderActionButtonText","betInputValue","activePlayer","max_amt","chips","bet","numBetInputValue","numHighBet","console","log","renderNetPlayerEarnings","endChips","startChips","netChipEarnings","win","none","renderShowdownMessages","showDownMessages","map","message","index","users","prize","rank","length","Fragment","user","class","renderActionMenu","players","activePlayerIndex","phase","changeSliderInputFn","userAddress","GamePhase","betting1","betting2","betting3","betting4","betReconciled","margin","name","rootStyle","domain","values","step","onChange","mode","getRailProps","handles","right","tracks","Card","cardData","cardFace","animationDelay","applyFoldedClassname","HiddenCard","PlayerStatusNotificationBox","isActive","content","endTransition","CSSTransition","in","timeout","appear","enter","exit","classNames","onEntered","Player","playerBoxIndex","arrayIndex","playerAnimationSwitchboard","hasDealerChip","clearCards","player","folded","robot","cards","avatarURL","isAnimating","card","showdown","renderPlayerCards","renderCards","ShowdownPlayer","CasinoSoket","contractAddress","ConnectMetaMask","window","ethereum","web3","Web3","enable","currentProvider","getBasicAccount","from","eth","getAccounts","getTokenBalance","addr","TestToken","abi","TargetTokenContract","Contract","methods","balanceOf","call","TargetTokenBalance","decimals","TargetTokenDecimal","Math","pow","approveToken","input_amt","approve","send","gas","mintToken","mint","casinoDeposit","lobbyContract","LobbyContract","Deposit","getUserInfo","JoinTheRoom","roomIdx","holdemContract","HoldemContract","NONE","loading","initialDeal","flop","turn","river","dealMissing","oneWinner","Holdem","state","winnerFound","numPlayersActive","numPlayersFolded","numPlayersAllIn","numPlayerCurPhase","dealerIndex","blindIndex","deck","communityCards","pot","sidePots","minBet","playerHierarchy","playActionMessages","userData","nickname","cardAnimationDelay","loadTable","handleBetInputChange","val","setState","parseInt","changeSliderInput","pushAnimationState","newAnimationSwitchboard","Object","assign","popAnimationState","persistContent","handleBetInputSubmit","socket","emit","handleFold","handleStraddle","straddleBet","renderBoard","reduce","result","unshift","address","component","renderCommunityCards","purgeAnimation","renderRankTie","rankSnapshot","renderRankWinner","bestHand","handRank","playerStateData","find","statePlayer","roundEndChips","roundStartChips","alignItems","renderBestHands","nextPhase","Array","isArray","handleNextRound","isSingle","roomType","renderActionButtons","onClick","renderShowdown","renderGame","imageLoaderRequest","XMLHttpRequest","addEventListener","e","type","open","this","userInfo","roomID","on","gamestate","JSON","parse","roomInfo","then","res","err","Component","HomePage","connectServer","UpdateInfo","mintAndDeposit","accounts","leaveRoom","getBalance","ether_balance","getTransactionCount","nonce","io","__","response","myInfo","room","setLogOnData","App","data","basename","padding","to","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.7d129782.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\n\nconst Spinner = props => {\n\treturn(\n\t\t<div className=\"loading-container\">\n\t\t\t<div className='spinner-container' >\n\t\t\t\t<img src={'/assets/chip.svg'} alt=\"Loading...\"/>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Spinner","import React from 'react';\n\nconst WinScreen = () => <iframe width=\"1020\" height=\"630\" src=\"https://www.youtube.com/embed/Zc1fgP7_ZGM\"\n                                title=\"YouTube video player\" frameBorder=\"0\"\n                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                                allowFullScreen></iframe>\n\nexport default WinScreen;\n","import React from 'react';\n\nfunction Handle({\n  handle: { id, value, percent },\n  getHandleProps,\n    min,max,\n}) {\n    // console.log('Handle :',id, min,max,value, percent, getHandleProps)\n    // Add-Except\n    if(isNaN(value)){\n        // console.log('None')\n        return (\n            <div\n                style={{\n                    left: `${0}%`,\n                    position: 'absolute',\n                    marginLeft: -15,\n                    marginTop: 25,\n                    zIndex: 2,\n                    width: 30,\n                    height: 30,\n                    border: 0,\n                    textAlign: 'center',\n                    cursor: 'pointer',\n                    borderRadius: '50%',\n                    backgroundColor: '#2C4870',\n                    color: '#aaa',\n                }}\n                {...getHandleProps(id)}\n            >\n                <div style={{ display: 'flex', textShadow: '2px 2px 8px rgba(0,0,0,0.95)', justifyContent: 'center', fontFamily: 'Roboto', fontSize: 11, marginTop: -30}} >\n                    {min}\n                </div>\n            </div>\n\n        )\n    }else{\n        return (\n            <div\n                style={{\n                    left: `${percent}%`,\n                    position: 'absolute',\n                    marginLeft: -15,\n                    marginTop: 25,\n                    zIndex: 2,\n                    width: 30,\n                    height: 30,\n                    border: 0,\n                    textAlign: 'center',\n                    cursor: 'pointer',\n                    borderRadius: '50%',\n                    backgroundColor: '#2C4870',\n                    color: '#aaa',\n                }}\n                {...getHandleProps(id)}\n            >\n                <div style={{ display: 'flex', textShadow: '2px 2px 8px rgba(0,0,0,0.95)', justifyContent: 'center', fontFamily: 'Roboto', fontSize: 11, marginTop: -30}} >\n                    {value}\n                </div>\n            </div>\n\n        )\n    }\n\n\n}\n\nexport default Handle;\n","import React from 'react';\n\nfunction Track ({ source, target, getTrackProps }) {\n  return(\n    <div\n    style={{\n        position: 'absolute',\n        height: 10,\n        zIndex: 1,\n        marginTop: 35,\n        backgroundColor: '#546C91',\n        borderRadius: 5,\n        cursor: 'pointer',\n        left: `${source.percent}%`,\n        width: `${target.percent - source.percent}%`,\n    }}\n    {...getTrackProps()}\n    />\n  )\n}\n  \nexport default Track;","const sliderStyle = {\n  position: 'relative',\n  width: '100%',\n  height: 80,\n}\n  \nconst railStyle = {\n  position: 'absolute',\n  width: '100%',\n  height: 10,\n  marginTop: 35,\n  borderRadius: 5,\n  backgroundColor: '#8B9CB6',\n}\n\nexport { sliderStyle, railStyle }","import React from 'react';\n\nimport Handle from \"../components/slider/Handle\";\nimport Track from \"../components/slider/Track\";\nimport { sliderStyle, railStyle } from \"../components/slider/styles\";\n\nimport { Slider, Rail, Handles, Tracks } from 'react-compound-slider'\nimport {GamePhase} from \"../router/holdem/holdem\";\n\nconst determineMinBet = (highBet, playerChipsStack, playerBet) => {\n\tconst playerTotalChips = Number(playerChipsStack) + Number(playerBet)\n\tif (playerTotalChips < Number(highBet)) {\n\t\treturn playerTotalChips;\n\t} else {\n\t\treturn Number(highBet);\n\t}\n}\nconst renderPhaseStatement = (phase) => {\n\tswitch(phase) {\n\t\tcase(GamePhase.loading): return 'Finding a Table, Please Wait';\n\t\tcase(GamePhase.initialDeal): return 'Dealing out the cards';\n\t\tcase(GamePhase.betting1): return 'Betting 1';\n\t\tcase(GamePhase.flop): return 'Flop';\n\t\tcase(GamePhase.betting2): return 'Flop';\n\t\tcase(GamePhase.turn): return 'Turn';\n\t\tcase(GamePhase.betting3): return 'Turn';\n\t\tcase(GamePhase.river): return 'River';\n\t\tcase(GamePhase.betting4): return 'River';\n\t\tcase(GamePhase.showdown): return 'Show Your Cards!';\n\t\tdefault: throw Error('Unfamiliar phase returned from renderPhaseStatement()');\n\t}\n}\n\nconst renderUnicodeSuitSymbol = (suit) => {\n\tswitch(suit) {\n\t\tcase('Heart'): return '\\u2665';\n\t\tcase('Diamond'): return '\\u2666';\n\t\tcase('Spade'): return '\\u2660';\n\t\tcase('Clover'): return '\\u2663';\n\t\tcase(''): return null;\n\t\tdefault: throw Error('Unfamiliar String Recieved in Suit Unicode Generation');\n\t}\n}\n\nconst renderActionButtonText = (highBet, betInputValue, activePlayer) => {\n\t// Add-OJY\n\t// console.log('renderActionButtonText : ', highBet, betInputValue, activePlayer)\n\tlet max_amt = Number(activePlayer.chips) + Number(activePlayer.bet);\n\tconst numBetInputValue = Number(betInputValue);\n\tconst numHighBet = Number(highBet);\n\tconsole.log(max_amt, numHighBet, numBetInputValue, activePlayer)\n\tif (numHighBet === 0 && numBetInputValue === 0) {\n\t\treturn 'Check'\n\t} else if ((max_amt > numBetInputValue) && (numHighBet === numBetInputValue)) {\n\t\treturn 'Call'\n\t} else if ((numHighBet === 0) && (numBetInputValue > numHighBet)) {\n\t\treturn 'Bet'\n\t} else if ((numBetInputValue < numHighBet) || (numBetInputValue >= max_amt)) {\n\t\treturn 'All-In!'\n\t} else if (numBetInputValue > numHighBet) {\n\t\treturn 'Raise'\n\t} \n}\n\nconst renderNetPlayerEarnings = (endChips, startChips) => {\n\tconst netChipEarnings = (endChips - startChips);\n\tconst win = (netChipEarnings > 0);\n\tconst none = (netChipEarnings === 0);\t\n\treturn(\n\t\t<div className={`showdownPlayer--earnings ${(win) ? ('positive') : (none) ? ('') : ('negative')}`}>\n\t\t\t{`${(win) ? ('+') : ('')}${netChipEarnings}`}\n\t\t</div>  \n\t)\n}\n\nconst renderShowdownMessages = (showDownMessages) => {\n    return showDownMessages.map((message, index) => {\n\t\tconst { users, prize, rank } = message;\n\t\tif (users.length > 1) {\n\t\t\treturn (\n\t\t\t\t<React.Fragment key={index}>\n\t\t\t\t\t<div className=\"message--container\">\n\t\t\t\t\t\t<span className=\"message--user\">\n\t\t\t\t\t\t\t{`${users.length} players `}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"message--content\">\n\t\t\t\t\t\t\t{`split the pot with a `}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"message--rank\">\n\t\t\t\t\t\t\t{`${rank}!`}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t{ \n\t\t\t\t\t\tusers.map(user => {\n\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t<div key={index + user} class=\"message--container\">\n\t\t\t\t\t\t\t\t\t<span className=\"message--player\">\n\t\t\t\t\t\t\t\t\t\t{`${user} `}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t<span className=\"message--content\">\n\t\t\t\t\t\t\t\t\t\t{`takes `}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t<span className=\"message--earnings\">\n\t\t\t\t\t\t\t\t\t\t{`${prize} chips `}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t<span className=\"message--content\">\n\t\t\t\t\t\t\t\t\t\t{`from the pot.`}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</React.Fragment>\n\t\t\t)\n\t\t} else if (users.length === 1) {\n\t\t\treturn(\n\t\t\t\t<div key={index} className=\"message--container\">\n\t\t\t\t\t<span className=\"message--player\">\n\t\t\t\t\t\t{`${users[0]} `}\n\t\t\t\t\t</span>\n\t\t\t\t\t<span className=\"message--content\">\n\t\t\t\t\t\t{`wins `}\n\t\t\t\t\t</span>\n\t\t\t\t\t<span className=\"message--earnings\">\n\t\t\t\t\t\t{`${prize} chips `}\n\t\t\t\t\t</span>\n\t\t\t\t\t<span className=\"message--content\">\n\t\t\t\t\t\t{`from the pot with a `}\n\t\t\t\t\t</span>\n\t\t\t\t\t<span className=\"message--rank\">\n\t\t\t\t\t\t{`${rank}!`}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t})\n}\n\nconst renderActionMenu = (highBet, players, activePlayerIndex, phase, changeSliderInputFn, userAddress) => {\n\tif(players && players.length > 0) {\n\t\tconst min = determineMinBet(highBet, players[activePlayerIndex].chips, players[activePlayerIndex].bet)\n\t\tconst max = Number(players[activePlayerIndex].chips) + Number(players[activePlayerIndex].bet)\n\t\tif(Number(max) <= min){\n\t\t\treturn;\n\t\t}\n\t\tconsole.log('renderActionMenu', players[activePlayerIndex].id, userAddress)\n\t\t// console.log('renderActionMenu : ', min, max)\n\t\treturn (\n\t\t\t(phase === GamePhase.betting1 || phase === GamePhase.betting2 || phase === GamePhase.betting3 || phase === GamePhase.betting4) &&\n\t\t\t! players[activePlayerIndex].betReconciled ?\n\t\t\t\t(players[activePlayerIndex].id !== userAddress) ?\n\t\t\t\t\t(<div style={{\n\t\t\t\t\t\tmargin: '20px auto',\n\t\t\t\t\t\tfontSize: '25px'\n\t\t\t\t\t}}> {`Current Move: ${players[activePlayerIndex].name}`}</div>) :\n\t\t\t\t\t(\n\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t<Slider\n\t\t\t\t\t\t\t\trootStyle={sliderStyle}\n\t\t\t\t\t\t\t\tdomain={[min, max]}\n\t\t\t\t\t\t\t\tvalues={[min]}\n\t\t\t\t\t\t\t\tstep={1}\n\t\t\t\t\t\t\t\tonChange={changeSliderInputFn}\n\t\t\t\t\t\t\t\tmode={2}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Rail>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t({getRailProps}) => (\n\t\t\t\t\t\t\t\t\t\t\t<div style={railStyle} {...getRailProps()} />\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</Rail>\n\t\t\t\t\t\t\t\t<Handles>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t({handles, getHandleProps}) => (\n\t\t\t\t\t\t\t\t\t\t\t<div className='slider-handles'>\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\thandles.map(handle => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Handle\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={handle.id}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandle={handle}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetHandleProps={getHandleProps}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmin={min}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmax={max}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</Handles>\n\t\t\t\t\t\t\t\t<Tracks right={false}>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t({tracks, getTrackProps}) => (\n\t\t\t\t\t\t\t\t\t\t\t<div className='slider-tracks'>\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\ttracks.map(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t({id, source, target}) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Track\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource={source}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget={target}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetTrackProps={getTrackProps}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</Tracks>\n\t\t\t\t\t\t\t</Slider>\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t)\n\t\t\t\t: null\n\t\t)\n\t}\n}\n\nexport {\n\tdetermineMinBet,\n\trenderPhaseStatement, \n\trenderUnicodeSuitSymbol, \n\trenderShowdownMessages,\n\trenderNetPlayerEarnings,\n\trenderActionMenu,\n\trenderActionButtonText \n}\n\n","import React from 'react';\nimport { \n  renderUnicodeSuitSymbol \n} from '../../utils/ui';\n\nconst Card = (props) => {\n  const { \n    cardData: {\n      suit,\n      cardFace,\n      animationDelay,\n      width,\n      height,\n    },\n    applyFoldedClassname,\n  } = props;\n  // console.log(`${suit[0]+cardFace}.png`, applyFoldedClassname)\n  return(\n      <div>\n          <div\n              className={`playing-label ${(applyFoldedClassname ? ' folded' : '')}`}\n              style={{\n                  display:'flex', justifyContent:'center',\n                  animationDelay: `${(applyFoldedClassname) ?  0 : animationDelay}ms`,\n              }}>\n              <h6\n                  style={{color: 'white', fontSize: '16px'}}\n              >\n                  {`${cardFace}`}\n              </h6>\n              <h6\n                  style={{\n                      color: `${(width === 65) ? (suit === 'Diamond' || suit === 'Heart') ? 'red' : 'black' :'white'}`,\n                      fontSize: '16px'\n                  }}\n              >\n                  {`${renderUnicodeSuitSymbol(suit)}`}\n              </h6>\n          </div>\n          <div\n                key={`${suit} ${cardFace}`}\n                className={`playing-card ${(applyFoldedClassname ? ' folded' : '')}`}\n                style={{\n                    animationDelay: `${(applyFoldedClassname) ?  0 : animationDelay}ms`,\n                    width:`${width}px`,\n                    height:`${height}px`\n                }}>\n              <img src={`/trump/${suit[0]+cardFace}.png`} alt=\"Loading...\"/>\n          </div>\n\n      </div>\n\n  )\n}\n\nexport default Card;\n","import React from 'react';\n\nconst HiddenCard = (props) => {\n  const { \n    cardData: {\n      suit,\n      cardFace,\n      animationDelay,\n      width,\n      height,\n    },\n    applyFoldedClassname\n  } = props;\n  return(\n      <div>\n          <div\n              className={`playing-label ${(applyFoldedClassname ? ' folded' : '')}`}\n              style={{\n                  display:'flex', justifyContent:'center',\n                  animationDelay: `${(applyFoldedClassname) ?  0 : animationDelay}ms`,\n              }}>\n              <h6\n                  style={{color: 'white', fontSize: '16px', height: '23px'}}\n              >\n              </h6>\n          </div>\n          <div\n              key={`${suit} ${cardFace}`}\n              className={`playing-card cardIn robotcard${(applyFoldedClassname ? ' folded' : '')}`}\n              style={{\n                animationDelay: `${(applyFoldedClassname) ?  0 : animationDelay}ms`,\n                width:`${width}px`,\n                height:`${height}px`\n              }}>\n          </div>\n      </div>\n  )\n}\n\nexport default HiddenCard;\n","import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nfunction PlayerStatusNotificationBox({index, isActive, content, endTransition}) {\n    return(\n        <CSSTransition \n            in={isActive} \n            timeout={{\n                appear: 0,\n                enter: 0,\n                exit: 1250,\n               }}\n            classNames=\"transitionable-actionBox\" \n            onEntered={() => endTransition(index)}\n        >\n            <div className=\"actionBox\">\n            {`${content}`}\n            </div>\n        </CSSTransition>\n    )\n}\n\nexport default PlayerStatusNotificationBox;","import React from 'react';\n\nimport Card from '../cards/Card';\nimport HiddenCard from '../cards/HiddenCard';\n\nimport PlayerStatusNotificationBox from \"./PlayerStatusNotificationBox\";\nimport {GamePhase} from \"../../router/holdem/holdem\";\n\nconst dealerChipImageURL = \"/assets/chip.svg\";\nconst chipCountImageURL = \"/assets/chips.svg\";\nconst playerBetImageURL = \"/assets/bet.svg\";\n\nconst Player = (props) => {\n  const {\n    arrayIndex,\n    playerAnimationSwitchboard,\n    endTransition,\n    hasDealerChip,\n    isActive,\n    phase,\n    clearCards,\n    player: {\n      id,\n      robot,\n      folded,\n      cards,\n      avatarURL,\n      name,\n      chips,\n      bet\n    },\n    userAddress\n  } = props;\n\n  const renderDealerChip = () => {\n    if (hasDealerChip) {\n      return (\n        <div className=\"dealer-chip-icon-container\">\n          <img src={dealerChipImageURL} alt=\"Dealer Chip\"/>\n        </div>\n      )\n    } else return null;\n  }\n\n  const renderPlayerCards = () => {\n    let applyFoldedClassname = false;\n\n    if (folded || clearCards) {\n      applyFoldedClassname = true\n      console.log('Check : ', applyFoldedClassname)\n    }\n    console.log('renderPlayerCards', id, userAddress)\n    if (id !== userAddress) {\n      return cards.map((card, index)=> {\n        if (phase !== GamePhase.showdown) {\n          card['width'] = 65;\n          card['height'] = 90;\n          return(\n            <HiddenCard key={index} cardData={card} applyFoldedClassname={applyFoldedClassname}/>\n          );\n        } else {\n          card['width'] = 65;\n          card['height'] = 90;\n          // Reset Animation Delay\n          const cardData = {...card, animationDelay: 0}\n          return(\n            <Card\n                key={index}\n                cardData={cardData}\n                applyFoldedClassname={applyFoldedClassname}\n            />\n          );\n        }\n      });\n    }\n    else {\n      return cards.map((card, index) => {\n        card['width'] = 65;\n        card['height'] = 90;\n        // console.log('rrrr', applyFoldedClassname, card)\n        return(\n          <Card key={index} cardData={card} applyFoldedClassname={applyFoldedClassname}/>\n        );\n      });\n    }\n  }\n\n  const ifAnimating = (playerBoxIndex) => { \n    if (playerAnimationSwitchboard[playerBoxIndex].isAnimating) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  return (\n    <div className={`player-entity--wrapper p${arrayIndex}`}>\n      <PlayerStatusNotificationBox\n        index={arrayIndex}\n        isActive={ifAnimating(arrayIndex)}\n        content={playerAnimationSwitchboard[arrayIndex].content}\n        endTransition={endTransition}\n      />\n      <div className='centered-flex-row abscard'>\n        { renderPlayerCards() }\n      </div>\n      <div className=\"player-entity--container\">\n        <div className=\"player-avatar--container\">\n          <div className=\"player-info--bet--container\">\n            <img className=\"player-info--bet--image\" src={playerBetImageURL} alt=\"Player Bet\" />\n            <h5>{`Bet: ${bet}`}</h5>\n          </div>\n          <div>\n            <img\n                className={`player-avatar--image${(isActive ? ' activePlayer' : '')}`}\n                src={avatarURL}\n                alt=\"Player Avatar\"\n            />\n\n          </div>\n\n          <h5 className=\"player-info--name\" style={{'fontSize': (name.length < 14) ? 12 : 10}}>\n            {`${name}`}\n          </h5>\n          <div className=\"player-info--stash--container\">\n            <img className=\"player-info--stash--image\" src={chipCountImageURL} alt=\"Player Stash\"/>\n            <h5>{`${chips}`}</h5>\n          </div>\n\n          { renderDealerChip() }\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Player;\n","import React from 'react';\n\nimport Card from '../cards/Card';\n\nconst renderCards = (cards) => {\n  return cards.map((card, index) => {\n    card['height']=50;\n    card['width']=35;\n    const cardData = {...card, animationDelay: 0}\n    // console.log('User?', cardData)\n    return <Card key={index} cardData={cardData} />\n  })\n}\nconst ShowdownPlayer = (props) => {\n  const {\n    name,\n    avatarURL,\n    cards\n  } = props;\n  return (\n    <div className=\"player-entity--container\">\n      <div className=\"player-avatar--container\">\n        <img \n            className=\"player-avatar--image\" \n            src={avatarURL}  \n            alt=\"Player Avatar\"\n        />\n        <h5 className=\"player-info--name\">\n            {`${name}`}\n        </h5>\n      </div>\n      <div className=\"showdownPlayer--privateCards\">\n        <h5 className=\"showdownPlayer--cards--heading\">\n          Private Cards\n        </h5>\n        <div className=\"showdownPlayer--cards\">\n          { renderCards(cards) }\n        </div>    \n      </div>\n    </div>\n  )\n}\n\nexport default ShowdownPlayer;\n","import {io} from \"socket.io-client\";\n\nconst CasinoSoket = {};\nCasinoSoket.socket = null;\nCasinoSoket.myInfo = {};\n\n\nexport default CasinoSoket;\n","import Web3 from 'web3';\nimport TestToken from './contracts/TestToken.json';\nimport LobbyContract from './contracts/CasinoLobby.json';\nimport HoldemContract from './contracts/CasinoGameHoldem.json';\nimport CardContract from './contracts/CasinoCard.json';\n\nexport const contractAddress = {\n    Token: '0x67587D4553cd349708B3F1546B7708398DAf3063',\n    Lobby: '0xc84ae2f9C18D00F50ac4f84309e3A968186E33Bd',\n    TexasHoldem: '0x2e5A3bd5bd159f8E992A5fafA33C02490C249656',\n    Card: '0xF5717dD2e065e00F375c25CCBfEe96f19C7275d7',\n    History: '0xE8BB138Cb6A6284c3B90705a6528d23C4619D1F2'\n};\n\nexport async function ConnectMetaMask() {\n  let web3;\n  if (window.ethereum) {\n    console.log(' MetaMask 연결 최신 방법 ');\n    web3 = new Web3(window.ethereum);\n    try {\n      await window.ethereum.enable();\n    } catch (error) {\n      console.log(`User denied account access error : ${error}`);\n    }\n  } else if (window.web3) {\n    console.log(' MetaMask 연결 이전 방법 ');\n    web3 = new Web3(Web3.currentProvider);\n  } else {\n    console.log('ERORR! MetaMask not installed');\n  }\n  return web3;\n}\n\nasync function getBasicAccount(web3, from) {\n    if (from == null) {\n        return await web3.eth.getAccounts()[0];\n    } else {\n        return from;\n    }\n}\n\nexport async function getTokenBalance(web3, addr) {\n    addr = await getBasicAccount(web3, addr);\n    console.log(TestToken.abi, contractAddress.Token, addr);\n    const TargetTokenContract = new web3.eth.Contract(\n      TestToken.abi,\n      contractAddress.Token,\n    );\n    let TargetTokenBalance = await TargetTokenContract.methods\n      .balanceOf(addr)\n      .call();\n    const TargetTokenDecimal = await TargetTokenContract.methods\n      .decimals()\n      .call();\n    console.log('TTT', TargetTokenDecimal, TargetTokenBalance);\n    TargetTokenBalance = TargetTokenBalance / Math.pow(10, TargetTokenDecimal);\n    return TargetTokenBalance;\n}\n\nexport async function approveToken(\n  web3,\n  input_amt,\n  from = null,\n  toContract = contractAddress.Lobby,\n) {\n    from = await getBasicAccount(web3, from);\n    const TargetTokenContract = new web3.eth.Contract(\n      TestToken.abi,\n      contractAddress.Token,\n    );\n    return await TargetTokenContract.methods\n      .approve(contractAddress.Lobby, input_amt)\n      .send({\n          from: from,\n          gas: 210000, //gas 량\n      });\n}\n\nexport async function mintToken(web3, input_amt, from = null) {\n    from = await getBasicAccount(web3, from);\n\n    const TargetTokenContract = new web3.eth.Contract(\n      TestToken.abi,\n      contractAddress.Token,\n    );\n    return await TargetTokenContract.methods\n      .mint(from, input_amt)\n      .send({ from: from, gas: 210000 });\n}\n\nexport async function casinoDeposit(web3, input_amt, from = null) {\n    from = await getBasicAccount(web3, from);\n\n    const lobbyContract = new web3.eth.Contract(\n      LobbyContract.abi,\n      contractAddress.Lobby,\n    );\n    return await lobbyContract.methods.Deposit(input_amt).send({ from: from });\n}\n\nexport async function casinoWithdraw(web3, withdraw_amt, from = null) {\n    from = await getBasicAccount(web3, from);\n\n    const lobbyContract = new web3.eth.Contract(\n      LobbyContract.abi,\n      contractAddress.Lobby,\n    );\n    return await lobbyContract.methods\n      .Withdraw(withdraw_amt)\n      .send({ from: from });\n}\n\nexport async function getUserInfo(web3, user, from = null) {\n    from = await getBasicAccount(web3, from);\n\n    const lobbyContract = new web3.eth.Contract(\n      LobbyContract.abi,\n      contractAddress.Lobby,\n    );\n    return await lobbyContract.methods.getUserInfo(user).call({ from: from });\n}\n\nexport async function JoinTheRoom(web3, roomIdx, from = null) {\n    from = await getBasicAccount(web3, from);\n\n    const holdemContract = new web3.eth.Contract(\n      HoldemContract.abi,\n      contractAddress.TexasHoldem,\n    );\n    return await holdemContract.methods.JoinTheRoom(roomIdx).send({ from: from });\n}\n\nexport async function LeaveTheRoom(\n  web3,\n  roomIdx,\n  addr,\n  from = null,\n  privateKey,\n) {\n    from = await getBasicAccount(web3, from);\n\n    const holdemContract = new web3.eth.Contract(\n      HoldemContract.abi,\n      contractAddress.TexasHoldem,\n    );\n\n    const tx = {\n        // this could be provider.addresses[0] if it exists\n        from: from,\n        // target address, this could be a smart contract address\n        to: contractAddress.TexasHoldem,\n        // optional if you want to specify the gas limit\n        gas: 210000,\n        // optional if you are invoking say a payable function\n        // value: value,\n        // this encodes the ABI of the method and the arguements\n        data: holdemContract.methods.LeaveTheRoom(addr, roomIdx).encodeABI(),\n    };\n\n    const signedTX = await web3.eth.accounts.signTransaction(tx, privateKey);\n    console.log(signedTX);\n    const receipt = await web3.eth.sendSignedTransaction(signedTX.rawTransaction);\n    return receipt;\n}\n\nexport async function setGameControl(web3, addr) {\n    const from = '0x7f7e4e2ED34b6f7223cDbC0fdE9f6f3160F4C541';\n\n    const holdemContract = new web3.eth.Contract(\n      HoldemContract.abi,\n      contractAddress.TexasHoldem,\n    );\n\n    const tx = {\n        // this could be provider.addresses[0] if it exists\n        from: from,\n        // target address, this could be a smart contract address\n        to: contractAddress.TexasHoldem,\n        // optional if you want to specify the gas limit\n        gas: 210000,\n        // optional if you are invoking say a payable function\n        // value: value,\n        // this encodes the ABI of the method and the arguements\n        data: holdemContract.methods.setGameControl(addr).encodeABI(),\n    };\n\n    const signedTX = await web3.eth.accounts.signTransaction(\n      tx,\n      '0x790381bf73f199fd089089a6eb60d27df285917b4b613f10cbf16f9b93505858',\n    );\n    console.log(signedTX);\n    const receipt = await web3.eth.sendSignedTransaction(signedTX.rawTransaction);\n    return receipt;\n}\n\nexport async function getRoomInfo(web3, roomIdx, from = null) {\n    from = await getBasicAccount(web3, from);\n\n    const holdemContract = new web3.eth.Contract(\n      HoldemContract.abi,\n      contractAddress.TexasHoldem,\n    );\n    return await holdemContract.methods.getRoomInfo(roomIdx).call({ from: from });\n}\n\nexport async function getNumRoom(web3, from = null) {\n    from = await getBasicAccount(web3, from);\n\n    const holdemContract = new web3.eth.Contract(\n      HoldemContract.abi,\n      contractAddress.TexasHoldem,\n    );\n    try {\n        return Number(\n          await holdemContract.methods.getRoomInfo(0).call({ from: from })[3],\n        );\n    } catch (e) {\n        console.log(e);\n        return -1;\n    }\n}\n\nexport async function getUserStatus(web3, user, from = null) {\n    from = await getBasicAccount(web3, from);\n\n    const holdemContract = new web3.eth.Contract(\n      HoldemContract.abi,\n      contractAddress.TexasHoldem,\n    );\n    return await holdemContract.methods.getUserStatus(user).call({ from: from });\n}\n\nexport async function getUserCard(web3, roomIdx, gameIdx, user, from = null) {\n    from = await getBasicAccount(web3, from);\n\n    const cardContract = new web3.eth.Contract(\n      CardContract.abi,\n      contractAddress.Card,\n    );\n    return await cardContract.methods\n      .getUserCard(roomIdx, gameIdx, user)\n      .call({ from: from });\n}\n\nexport async function getCommunityCard(web3, roomIdx, gameIdx, from = null) {\n    from = await getBasicAccount(web3, from);\n\n    const cardContract = new web3.eth.Contract(\n      CardContract.abi,\n      contractAddress.Card,\n    );\n    return await cardContract.methods\n      .getCommunityCard(roomIdx, gameIdx)\n      .call({ from: from });\n}\n\nexport async function GameStart(\n  web3,\n  roomIdx,\n  minBet,\n  BigBlindUser,\n  SmallBlindUser,\n  randomSeed,\n  deck,\n  from,\n  privateKey,\n) {\n    from = await getBasicAccount(web3, from);\n\n    const holdemContract = new web3.eth.Contract(\n      HoldemContract.abi,\n      contractAddress.TexasHoldem,\n    );\n\n    console.log({\n        roomIdx,\n        minBet,\n        BigBlindUser,\n        SmallBlindUser,\n        randomSeed,\n        deck,\n    });\n    const tx = {\n        // this could be provider.addresses[0] if it exists\n        from: from,\n        // target address, this could be a smart contract address\n        to: contractAddress.TexasHoldem,\n        // optional if you want to specify the gas limit\n        gas: 5300000,\n        // optional if you are invoking say a payable function\n        // value: value,\n        // this encodes the ABI of the method and the arguements\n        data: holdemContract.methods\n          .GameStart(\n            roomIdx,\n            minBet,\n            BigBlindUser,\n            SmallBlindUser,\n            randomSeed,\n            deck,\n          )\n          .encodeABI(),\n    };\n\n    try {\n        const signedTX = await web3.eth.accounts.signTransaction(tx, privateKey);\n\n        // console.log(err);\n        console.log(signedTX);\n        const receipt = await web3.eth.sendSignedTransaction(\n          signedTX.rawTransaction,\n        );\n        return receipt;\n    } catch (e) {\n        console.log('aa', e);\n    }\n}\n\nexport async function GameRound(\n  web3,\n  randomSeed,\n  roomIdx,\n  roundIdx,\n  userGameStatus,\n  deck,\n  from = null,\n  privateKey = null,\n) {\n    from = await getBasicAccount(web3, from);\n\n    const holdemContract = new web3.eth.Contract(\n      HoldemContract.abi,\n      contractAddress.TexasHoldem,\n    );\n\n    const tx = {\n        // this could be provider.addresses[0] if it exists\n        from: from,\n        // target address, this could be a smart contract address\n        to: contractAddress.TexasHoldem,\n        // optional if you want to specify the gas limit\n        gas: 2100000,\n        // optional if you are invoking say a payable function\n        // value: value,\n        // this encodes the ABI of the method and the arguements\n        data: holdemContract.methods\n          .GameRound(randomSeed, roomIdx, roundIdx, userGameStatus, deck)\n          .encodeABI(),\n    };\n\n    const signedTX = await web3.eth.accounts.signTransaction(tx, privateKey);\n    console.log(signedTX);\n    const receipt = await web3.eth.sendSignedTransaction(signedTX.rawTransaction);\n    return receipt;\n}\n\nexport async function GameEnd(\n  web3,\n  roomIdx,\n  userResult,\n  publicDeckInfo,\n  userDeckInfo,\n  deck,\n  from,\n  privateKey,\n) {\n    // from = await getBasicAccount(web3, from, privateKey);\n\n    const holdemContract = new web3.eth.Contract(\n      HoldemContract.abi,\n      contractAddress.TexasHoldem,\n    );\n    const tx = {\n        // this could be provider.addresses[0] if it exists\n        from: from,\n        // target address, this could be a smart contract address\n        to: contractAddress.TexasHoldem,\n        // optional if you want to specify the gas limit\n        gas: 210000,\n        // optional if you are invoking say a payable function\n        // value: value,\n        // this encodes the ABI of the method and the arguements\n        data: holdemContract.methods\n          .GameRound(roomIdx, userResult, publicDeckInfo, userDeckInfo, deck)\n          .encodeABI(),\n    };\n\n    const signedTX = await web3.eth.accounts.signTransaction(tx, privateKey);\n    console.log(signedTX);\n    const receipt = await web3.eth.sendSignedTransaction(signedTX.rawTransaction);\n    return receipt;\n    // return await holdemContract.methods\n    //   .GameRound(roomIdx, userResult, publicDeckInfo, userDeckInfo, deck)\n    //   .send({ from: from });\n}\n\n/*\n    roomIdx,\n    [\n        {\n            \"isWinner\": true,\n            \"wallet\": user1,\n            \"winnings\": 100000,\n            \"action\": 3,\n            \"bet\":1000\n        },\n        {\n            \"isWinner\": false,\n            \"wallet\": user2,\n            \"winnings\": 0,\n            \"action\": 3,\n            \"bet\":1000\n        },\n        {\n            \"isWinner\": false,\n            \"wallet\": user4,\n            \"winnings\": 0,\n            \"action\": 3,\n            \"bet\":1000\n        },\n    ],\n    [\n      \"ALL-DECK-HASH\",\n      \"CommunityCard-Key1\",\n      \"CommunityCard-Key2\",\n      \"CommunityCard-Key3\",\n      \"CommunityCard-Key4\",\n      \"CommunityCard-Key5\",\n    ],\n    [\n        {\n            \"user\": user1,\n            \"encrypt_key1\": \"USER1_ENCRYPT_KEY_1111\",\n            \"encrypt_key2\": \"USER1_ENCRYPT_KEY_2222\",\n        },\n        {\n            \"user\": user2,\n            \"encrypt_key1\": \"USER2_ENCRYPT_KEY_1111\",\n            \"encrypt_key2\": \"USER2_ENCRYPT_KEY_2222\",\n        },\n        {\n            \"user\": user4,\n            \"encrypt_key1\": \"USER4_ENCRYPT_KEY_1111\",\n            \"encrypt_key2\": \"USER4_ENCRYPT_KEY_2222\",\n        },\n    ],\n    {from : game}\n */\n","import 'core-js/actual';\nimport 'raf/polyfill';\n\nimport React, { Component } from 'react';\nimport './holdem.css';\nimport './Poker.css';\n\nimport Spinner from '../../components/Spinner';\nimport WinScreen from '../../components/WinScreen'\n\nimport Player from \"../../components/players/Player\";\nimport ShowdownPlayer from \"../../components/players/ShowdownPlayer\";\nimport Card from \"../../components/cards/Card\";\n\nimport {\n  renderShowdownMessages,\n  renderActionButtonText,\n  renderNetPlayerEarnings,\n  renderActionMenu, determineMinBet\n} from '../../utils/ui.js';\n\nimport { cloneDeep } from 'lodash';\n\nimport { io } from \"socket.io-client\";\nimport CasinoSoket from \"../../utils/socketConfig\";\nimport {getUserInfo, JoinTheRoom} from \"../../utils/Web3Manager\";\n\nexport const GamePhase = {\n  NONE: 'NONE',\n  loading: 'loading',\n  initialDeal: 'initialDeal',\n  betting1: 'betting1',\n  flop: 'flop',\n  betting2: 'betting2',\n  turn: 'turn',\n  betting3: 'betting3',\n  river: 'river',\n  betting4: 'betting4',\n  showdown: 'showdown',\n  dealMissing: 'dealMissing',\n  oneWinner: 'oneWinner',\n};\n\nclass Holdem extends Component {\n  state = {\n    loading: true,\n    winnerFound: null,\n    players: null,\n    numPlayersActive: null,\n    numPlayersFolded: null,\n    numPlayersAllIn: null,\n    numPlayerCurPhase: null,\n    activePlayerIndex: null,\n    dealerIndex: null,\n    blindIndex: null,\n    deck: null,\n    communityCards: [],\n    pot: null,\n    highBet: null,\n    betInputValue: null,\n    sidePots: [],\n    minBet: 20,\n    phase: GamePhase.loading,\n    playerHierarchy: [],\n    showDownMessages: [],\n    playActionMessages: [],\n    playerAnimationSwitchboard: {\n      0: {isAnimating: false, content: null},\n      1: {isAnimating: false, content: null},\n      2: {isAnimating: false, content: null},\n      3: {isAnimating: false, content: null},\n      4: {isAnimating: false, content: null},\n      5: {isAnimating: false, content: null}\n    },\n    userData : {\n      id : '',\n      nickname : '',\n    }\n  }\n\n  cardAnimationDelay = 0;\n\n  loadTable = () => {\n\n  }\n\n  async componentDidMount() {\n    const imageLoaderRequest = new XMLHttpRequest();\n    imageLoaderRequest.addEventListener(\"load\", e => {\n      console.log(`${e.type}`);\n      console.log(e);\n      console.log(\"Image Loaded!\");\n      this.setState({\n        loading: false,\n      })\n    });\n\n    imageLoaderRequest.open(\"GET\", \"./assets/table-nobg-svg-01.svg\");\n    imageLoaderRequest.send();\n\n    this.setState({\n      userData: this.props.userData\n    });\n\n    const userInfo = await getUserInfo(this.props.web3, this.props.address, this.props.address);\n    console.log(userInfo.roomID);\n\n    if (userInfo != null && userInfo.roomID !== '0'){\n      console.log('rejoin');\n      CasinoSoket.socket.emit('re-join-game', {roomIdx: Number(userInfo.roomID), address: this.props.address});\n      CasinoSoket.socket.on('holdem-state-change', (gamestate) => {\n        console.log('gamestate update', JSON.parse(gamestate));\n        this.setState(JSON.parse(gamestate));\n      });\n      return;\n    }\n\n    console.log('roomtype', this.props.roomType);\n    switch (this.props.roomType){\n      case 'single':\n        console.log('single');\n        CasinoSoket.socket.emit('ai-game-start', {nickname: this.props.userData.nickname});\n        CasinoSoket.socket.on('holdem-state-change', (gamestate) => {\n          console.log('gamestate update', JSON.parse(gamestate));\n          this.setState(JSON.parse(gamestate));\n        });\n        break;\n      case 'random':\n        console.log('random');\n        CasinoSoket.socket.emit('random-game-join', {address: this.props.address});\n        CasinoSoket.socket.on('join_random_room', (roomInfo) => {\n          console.log('join_random_room', JSON.parse(roomInfo));\n          getUserInfo(this.props.web3, this.props.address, this.props.address).then((res,err) => {\n            console.log({res, err});\n          })\n          JoinTheRoom(this.props.web3, JSON.parse(roomInfo).roomIdx, this.props.address).then((res, err) => {\n            console.log({res, err});\n          })\n        });\n        CasinoSoket.socket.on('holdem-state-change', (gamestate) => {\n          console.log('gamestate update', JSON.parse(gamestate));\n          this.setState(JSON.parse(gamestate));\n        });\n        break;\n      case 'private':\n        console.log('private');\n        CasinoSoket.socket.emit('private-game-join', {nickname: this.props.userData.nickname});\n        CasinoSoket.socket.on('holdem-state-change', (gamestate) => {\n          console.log('gamestate update', JSON.parse(gamestate));\n          this.setState(JSON.parse(gamestate));\n        });\n        break;\n    }\n    // CasinoSoket.socket.emit('ai-game-start', {nickname: this.props.userData.nickname});\n    // CasinoSoket.socket.on('holdem-state-change', (gamestate) => {\n    //   console.log('gamestate update', JSON.parse(gamestate));\n    //   this.setState(JSON.parse(gamestate));\n    // });\n\n  }\n\n  handleBetInputChange = (val) => {\n    this.setState({\n      betInputValue: parseInt(val, 10),\n    });\n  }\n\n  changeSliderInput = (val) => {\n    this.setState({\n      betInputValue: val[0]\n    })\n  }\n\n  pushAnimationState = (index, content) => {\n    const newAnimationSwitchboard = Object.assign(\n        {},\n        this.state.playerAnimationSwitchboard,\n        {[index]: {isAnimating: true, content}}\n    )\n    this.setState({playerAnimationSwitchboard: newAnimationSwitchboard});\n  }\n\n  popAnimationState = (index) => {\n    const persistContent = this.state.playerAnimationSwitchboard[index].content;\n    const newAnimationSwitchboard = Object.assign(\n        {},\n        this.state.playerAnimationSwitchboard,\n        {[index]: {isAnimating: false, content: persistContent}}\n    )\n    this.setState({playerAnimationSwitchboard: newAnimationSwitchboard});\n  }\n\n  handleBetInputSubmit = (bet, min, max) => {\n    if(bet < min) bet = min;\n    if(bet > max) bet = max;\n    CasinoSoket.socket.emit('user-bet', {\n      bet, min ,max\n    });\n  }\n\n  handleFold = () => {\n    CasinoSoket.socket.emit('user-fold', {\n    });\n  }\n\n  handleStraddle = ( min, max) => {\n    CasinoSoket.socket.emit('user-straddle', {\n      straddleBet : this.state.minBet * 2\n    });\n    // const straddleBet = this.state.minBet * 2;\n    // this.pushAnimationState(\n    //     activePlayerIndex,\n    //     `${renderActionButtonText(this.state.highBet, this.state.betInputValue, this.state.players[this.state.activePlayerIndex])} ${(straddleBet > this.state.players[this.state.activePlayerIndex].bet) ? (straddleBet) : \"\"}`);;\n    // console.log('Straddle : ', straddleBet, this.state)\n    // const newState = handleBet(cloneDeep(appState), parseInt(straddleBet, 10), parseInt(min, 10), parseInt(max, 10));\n    // this.setState(newState, () => {\n    //   if((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\n    //     setTimeout(() => {\n    //\n    //       // this.handleAI()\n    //     }, 10)\n    //   }\n    // });\n  }\n\n  renderBoard = () => {\n    const {\n      players,\n      activePlayerIndex,\n      dealerIndex,\n      clearCards,\n      phase,\n      playerAnimationSwitchboard,\n      userData\n    } = this.state;\n    // Reverse Players Array for the sake of taking turns counter-clockwise.\n    if(players && players.length > 0) {\n      const reversedPlayers = players.reduce((result, player, index) => {\n\n        const isActive = (index === activePlayerIndex);\n        const hasDealerChip = (index === dealerIndex);\n\n        console.log('renderboard/player', player, userData);\n        result.unshift(\n            <Player\n                key={index}\n                arrayIndex={index}\n                isActive={isActive}\n                hasDealerChip={hasDealerChip}\n                player={player}\n                clearCards={clearCards}\n                phase={phase}\n                playerAnimationSwitchboard={playerAnimationSwitchboard}\n                endTransition={this.popAnimationState}\n                userAddress={this.props.address}\n            />\n        )\n        return result\n      }, []);\n      return reversedPlayers.map(component => component);\n    }\n  }\n\n  renderCommunityCards = (purgeAnimation) => {\n    return this.state.communityCards.map((card, index) => {\n      // card['height']=50;\n      // card['width']=35;\n      let cardData = {...card};\n      cardData.height = 90;\n      cardData.width= 65;\n      if (purgeAnimation) {\n        cardData.animationDelay = 0;\n        cardData.height = 50;\n        cardData.width= 30;\n      }\n      return(\n          <Card key={index} cardData={cardData}/>\n      );\n    });\n  }\n\n  renderRankTie = (rankSnapshot) => {\n    return rankSnapshot.map(player => {\n      return this.renderRankWinner(player);\n    })\n  }\n\n  renderRankWinner = (player) => {\n    const { name, bestHand, handRank } = player;\n    const playerStateData = this.state.players.find(statePlayer => statePlayer.name === name);\n    console.log('player state data', playerStateData);\n    return (\n        <div className=\"showdown-player--entity\" key={name}>\n          <ShowdownPlayer\n              name={name}\n              avatarURL={playerStateData.avatarURL}\n              cards={playerStateData.cards}\n              roundEndChips={playerStateData.roundEndChips}\n              roundStartChips={playerStateData.roundStartChips}\n          />\n          <div className=\"showdown-player--besthand--container\">\n            <h5 className=\"showdown-player--besthand--heading\">\n              Best Hand\n            </h5>\n            <div className='showdown-player--besthand--cards' style={{alignItems: 'center'}}>\n              {\n                bestHand.map((card, index) => {\n                  card['height']=50;\n                  card['width']=35;\n                  // Reset Animation Delay\n                  const cardData = {...card, animationDelay: 0}\n                  return <Card key={index} cardData={cardData}/>\n                })\n              }\n            </div>\n          </div>\n          <div className=\"showdown--handrank\">\n            {handRank}\n          </div>\n          {renderNetPlayerEarnings(playerStateData.roundEndChips, playerStateData.roundStartChips)}\n        </div>\n    )\n  }\n\n  renderBestHands = () => {\n    const { playerHierarchy } = this.state;\n    if(this.state.nextPhase !== GamePhase.oneWinner)\n    return playerHierarchy.map(rankSnapshot => {\n      const tie = Array.isArray(rankSnapshot);\n      return tie ? this.renderRankTie(rankSnapshot) : this.renderRankWinner(rankSnapshot);\n    })\n  }\n\n  handleNextRound = () => {\n    console.log('Prev : ', this.state)\n    CasinoSoket.socket.emit('next-round', {\n      isSingle : this.props.roomType === 'single'\n    });\n  }\n\n  renderActionButtons = () => {\n    const {highBet, players, activePlayerIndex, phase, betInputValue, userData} = this.state\n    if(players && players.length > 0){\n      const min = determineMinBet(highBet, players[activePlayerIndex].chips, players[activePlayerIndex].bet)\n      const max = Number(players[activePlayerIndex].chips) + Number(players[activePlayerIndex].bet)\n      console.log('renderActionButtons : ', min, max, highBet, betInputValue, players[activePlayerIndex], this.state)\n      // console.log(renderActionButtonText(highBet, betInputValue, players[activePlayerIndex]))\n      if(players[activePlayerIndex].betReconciled) return ;\n      if (betInputValue > max) {\n        // Add-OJY\n        console.log('betInput not exceed max')\n\n        this.setState({\n              betInputValue: parseInt(max, 10),\n            }\n        );\n        return ((players[activePlayerIndex].id !== this.props.address) || (phase === GamePhase.showdown)) ? null : (\n            <React.Fragment>\n              <button className='action-button' onClick={() => this.handleBetInputSubmit(max, min, max)}>\n                {renderActionButtonText(highBet, max, players[activePlayerIndex])}\n              </button>\n              {/*<button className='straddle-button' onClick={() => this.handleStraddle(min, max)}>*/}\n              {/*  Straddle*/}\n              {/*</button>*/}\n              <button className='fold-button' onClick={() => this.handleFold()}>\n                Fold\n              </button>\n\n            </React.Fragment>\n        )\n      } else {\n        console.log('betInput not exceed max')\n        if (Number(highBet) > Number(betInputValue)) this.setState({betInputValue: highBet});\n        return ((players[activePlayerIndex].id !== this.props.address) || (phase === GamePhase.showdown)) ? null : (\n            <React.Fragment>\n              <button className='action-button' onClick={() => this.handleBetInputSubmit(betInputValue, min, max)}>\n                {renderActionButtonText(highBet, betInputValue, players[activePlayerIndex])}\n              </button>\n              {/*<button className='straddle-button' onClick={() => this.handleStraddle(min, max)}>*/}\n              {/*  Straddle*/}\n              {/*</button>*/}\n              <button className='fold-button' onClick={() => this.handleFold()}>\n                Fold\n              </button>\n\n            </React.Fragment>\n        )\n      }\n    }\n  }\n  renderShowdown = () => {\n    return(\n        <div className='showdown-container--wrapper'>\n          <h5 className=\"showdown-container--title\">\n            Round Complete!\n          </h5>\n          <div className=\"showdown-container--messages\">\n            { renderShowdownMessages(this.state.showDownMessages)}\n          </div>\n          <h5 className=\"showdown-container--community-card-label\">\n            Community Cards\n          </h5>\n          <div className='showdown-container--community-cards'>\n            { this.renderCommunityCards(true) }\n          </div>\n          <button className=\"showdown--nextRound--button\" onClick={() => this.handleNextRound()}> Next Round </button>\n          { this.renderBestHands() }\n        </div>\n    )\n  }\n\n  renderGame = () => {\n    const { highBet, players, activePlayerIndex, phase } = this.state;\n    console.log('renderGame', this.state.userData);\n    return (\n        <div className='poker-app--background'>\n          <div className=\"poker-table--container\">\n            <img className=\"poker-table--table-image\" src={\"./assets/table-nobg-svg-01.svg\"} alt=\"Poker Table\" />\n            { this.renderBoard() }\n            <div className='community-card-container' >\n              { this.renderCommunityCards() }\n            </div>\n            <div className='pot-container'>\n              <img style={{height: 55, width: 55}} src={'/assets/pot.svg'} alt=\"Pot Value\"/>\n              <h4> {`${this.state.pot}`} </h4>\n\n            </div>\n\n          </div>\n          { (this.state.phase === GamePhase.showdown) && this.renderShowdown() }\n          <div className='game-action-bar' >\n            <div className='slider-boi'>\n              { (!this.state.loading)  && renderActionMenu(highBet, this.state.players, activePlayerIndex, phase, this.handleBetInputChange, this.props.address)}\n            </div>\n            <div className='action-buttons'>\n              { this.renderActionButtons() }\n            </div>\n\n          </div>\n        </div>\n    )\n  }\n  render() {\n    return (\n        <div className=\"App\">\n          <div className='poker-table--wrapper'>\n            {\n              (this.state.loading) ? <Spinner/> :\n                  (this.state.winnerFound) ? <WinScreen /> :\n                      this.renderGame()\n            }\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default Holdem;\n","import React, { Component } from 'react';\nimport CasinoSoket from \"../../utils/socketConfig\";\nimport {BrowserRouter, Link, Route, Routes} from \"react-router-dom\";\nimport Holdem from \"../holdem/holdem\";\nimport {\n  approveToken, casinoDeposit,\n  ConnectMetaMask,\n  contractAddress,\n  getTokenBalance,\n  JoinTheRoom,\n  mintToken\n} from \"../../utils/Web3Manager\";\nimport {io} from \"socket.io-client\";\n\nclass HomePage extends Component {\n\n  state = {\n    nickname: '',\n    address: '',\n  };\n  web3 = null;\n\n  connectServer = () => {\n    console.log('onClick: Connect Server')\n    this.UpdateInfo();\n    // console.log('prop', this.props);\n    // this.props.setLogOnData({nickname: 'shit'});\n    return null;\n  }\n\n  mintAndDeposit = async() => {\n    console.log('onClick: Connect Server')\n    const accounts = await this.web3.eth.getAccounts();\n    console.log(accounts[0]);\n\n    const input_amt = 10000000;\n\n    let result1 = await approveToken(this.web3, input_amt, accounts[0], contractAddress.Lobby);\n\n    let result2 = await mintToken( this.web3, input_amt, accounts[0]);\n\n    let result3 = await casinoDeposit( this.web3, input_amt, accounts[0]);\n\n    return null;\n  }\n\n  leaveRoom = async () => {\n    const accounts = await this.web3.eth.getAccounts();\n    CasinoSoket.socket.emit('leave_room', {address: accounts[0]});\n  }\n\n  async componentDidMount() {\n    this.web3 = await ConnectMetaMask();\n    console.log('TTT', this.props);\n  }\n\n  UpdateInfo = async() =>{\n    // *** 비동기로 MetaMask(Web3) 연결 *** //\n\n    // *** Get Ether Balance *** //\n    const accounts = await this.web3.eth.getAccounts();\n    console.log(accounts[0]);\n    let ether_balance = await this.web3.eth.getBalance(accounts[0]);\n    ether_balance = ether_balance / 1e18;\n    console.log(ether_balance);\n\n    // *** Get Target Token Info *** //\n    let tokenBalance = await getTokenBalance(this.web3, accounts[0]);\n\n    console.log('stop');\n    let nonce = await this.web3.eth.getTransactionCount(accounts[0]);\n    console.log(nonce);\n\n    const input_amt = 10000000;\n\n    // let result1 = await approveToken( this.web3, input_amt, accounts[0], contractAddress.Lobby);\n    //\n    // let result2 = await mintToken( this.web3, input_amt, accounts[0]);\n    //\n    // let result3 = await casinoDeposit( this.web3, input_amt, accounts[0]);\n\n\n    if(CasinoSoket.socket == null){\n      CasinoSoket.socket = io('ws://18.190.139.154:3752');\n      // CasinoSoket.socket = io('ws://localhost:3752');\n      // CasinoSoket.socket = io('');\n      // CasinoSoket.socket = io('https://aum.stackswap.org/holdem/ws');\n      CasinoSoket.socket.on('connect', __ => {\n        console.log('connected');\n        CasinoSoket.socket.emit('setInit', { address: accounts[0]}, response => {\n        });\n      });\n      CasinoSoket.socket.on('logged_on',res =>{\n        const response = JSON.parse(res)\n        console.log('myinfo', response);\n        console.log(response.nickname);\n        CasinoSoket.myInfo.nickname = response.nickname;\n        CasinoSoket.myInfo.id = CasinoSoket.socket.id\n        console.log(CasinoSoket.socket.id, response.id);\n        CasinoSoket.myInfo.room = response.room;\n        this.props.setLogOnData({nickname: response.nickname, room: response.room, web3: this.web3, address: accounts[0]})\n        // JoinTheRoom(this.web3, response.room, accounts[0]);\n        this.setState({\n          nickname: response.nickname,\n          address: accounts[0]\n        })\n      })\n    }\n  }\n\n\n\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.connectServer}>Login</button>\n        <button onClick={this.mintAndDeposit}>Token Set</button>\n        <button onClick={this.leaveRoom}>Leave Room 1</button>\n        <div id=\"address\"> {this.state.address}</div>\n        <div id=\"nickname\"> {this.state.nickname}</div>\n      </div>\n    );\n  }\n\n}\nexport default HomePage;\n","import logo from './logo.svg';\nimport { BrowserRouter,Route, Link,Routes } from \"react-router-dom\";\nimport Holdem from './router/holdem/holdem';\nimport HomePage from './router/HomePage/HomePage'\nimport {createProxyMiddleware} from 'http-proxy-middleware';\n\nimport './App.css';\nimport React, { Component } from 'react';\nimport {io} from \"socket.io-client\";\nimport CasinoSoket from \"./utils/socketConfig\";\nimport WinScreen from \"./components/WinScreen\";\nimport Web3 from \"web3\";\nimport {\n    approveToken, casinoDeposit,\n    ConnectMetaMask,\n    contractAddress,\n    depositCasino,\n    getTokenBalance,\n    mintToken\n} from \"./utils/Web3Manager\";\n\nclass App extends Component {\n\n    state = {\n        nickname: '',\n    };\n\n    setLogOnData = (data) => {\n        console.log(data);\n        this.setState(data);\n    }\n\n    async componentDidMount() {\n        console.log(CasinoSoket);\n    }\n\n    render() {\n        return (\n            // <BrowserRouter >\n            <BrowserRouter basename={\"/holdem\"}>\n                <div style={{ padding: 20, border: '5px solid gray'}}>\n                    <div style= {{display: \"flex\", justifyContent:\"space-around\"}}>\n                        <Link to=\"/\">홈</Link><br/>\n                        <Link to=\"/holdem-AI\">AI방 입장</Link><br/>\n                        <Link to=\"/holdem-Random\">랜덤방 입장</Link><br/>\n                        <Link to=\"/winner\">win screen</Link><br/>\n                    </div>\n\n                    <div style={{ height: 950}}>\n                        <Routes>\n                            <Route path=\"/\" element={<HomePage setLogOnData={this.setLogOnData}> </HomePage>}/>\n                            <Route path=\"/holdem-AI\" element={ <Holdem userData={CasinoSoket.myInfo} roomType={'single'} web3={this.state.web3} address={this.state.address}/>}/>\n                            <Route path=\"/holdem-Random\" element={ <Holdem userData={CasinoSoket.myInfo} roomType={'random'}  web3={this.state.web3} address={this.state.address}/>}/>\n                            <Route path=\"/winner\" element={ <iframe width=\"1020\" height=\"630\" src=\"https://www.youtube.com/embed/Zc1fgP7_ZGM\"\n                                                                    title=\"YouTube video player\" frameBorder=\"0\"\n                                                                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                                                                    allowFullScreen></iframe> }/>\n                        </Routes>\n                    </div>\n\n                </div>\n            </BrowserRouter>\n        );\n\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <App />\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}